- name: include vars
  include_vars: ../defaults/main.yml

- name: include vars
  include_tasks: create_user.yaml

# 在远端创建mindxdl镜像目录
- name: create mindxdl images directory on remote
  file:
    path: "{{mindxdl_images_dir}}/{{ansible_architecture}}"
    state: directory
    mode: 0750
  when:
    - not use_harbor

- name: list hccl images
  shell: "ls {{mindxdl_images_dir}}/{{ansible_architecture}} | grep {{HCCL_COMPONENT}}"
  delegate_to: localhost
  delegate_facts: true
  register: hccl_images
  when:
    - not use_harbor

# 复制hccl镜像到master and other master
- name: copy hccl images to other master
  copy:
    src: "{{mindxdl_images_dir}}/{{ansible_architecture}}/{{item}}"
    dest: "{{mindxdl_images_dir}}/{{ansible_architecture}}/"
    mode: 0640
    owner: "{{ansible_user_id}}"
    group: "{{ansible_user_id}}"
  loop: "{{hccl_images.stdout_lines}}"
  when:
    - not use_harbor

# 在控制节点加载hccl镜像
- name: load hccl images
  shell: "docker load -i {{mindxdl_images_dir}}/{{ansible_architecture}}/{{item}}"
  loop: "{{hccl_images.stdout_lines}}"
  when:
    - not use_harbor

- name: modify hccl yaml
  shell: "ls {{mindxdl_yaml_dir}} | grep {{HCCL_COMPONENT}} | grep -v 'without'"
  register: yaml_file
  when:
    - inventory_hostname in groups['master'][0]

- name: modify hccl yaml
  shell: |
    sed -i 's/image: /image: {{ HARBOR_SERVER }}\/{{ HARBOR_MINDX_PROJECT }}\//' {{ mindxdl_yaml_dir }}/{{ item }};
    sed -i 's/imagePullPolicy: Never/imagePullPolicy: IfNotPresent/' {{ mindxdl_yaml_dir }}/{{ item }};
    sed -i '/      containers:/i\      imagePullSecrets:' {{ mindxdl_yaml_dir }}/{{ item }};
    sed -i '/      containers:/i\        - name: {{MINDX_DL_SECRET_FOR_HARBOR}}' {{ mindxdl_yaml_dir }}/{{ item }};
  loop: "{{ yaml_file.stdout_lines }}"
  when:
    - use_harbor
    - inventory_hostname in groups['master'][0]

- name: get hccl image name when use harbor
  delegate_to: localhost
  run_once: true
  shell:
    cmd:
      cd {{mindxdl_yaml_dir}};
      cat $(find . -name "{{ HCCL_COMPONENT }}*.yaml" -type f  | grep -v "without" | head -n 1) | grep 'image:' | awk '{print $2}'
  register: image_name
  when:
    - do_upgrade is defined
    - use_harbor

- name: set fact hccl image name
  delegate_to: localhost
  run_once: true
  set_fact:
    hccl_image_name: "{{ image_name['stdout_lines'] | unique  }}"
    cacheable: yes
  when:
    - do_upgrade is defined
    - use_harbor
    - image_name is defined and STDOUT_LINES_KEY in image_name and image_name[STDOUT_LINES_KEY] | length > 0

- name: pull hccl image
  shell:
    cmd:
      docker pull "{{ item }}"
  loop: "{{ hostvars['localhost'].hccl_image_name }}"
  when:
    - do_upgrade is defined
    - use_harbor
    - "'hccl_image_name' in hostvars['localhost']"
    - HARBOR_SERVER in item

- name: label dl master
  shell: |
    kubectl label --overwrite node {{ NODE_NAME }} masterselector=dls-master-node
  environment:
    http_proxy: ""
    https_proxy: ""
    HTTP_PROXY: ""
    HTTPS_PROXY: ""

- name: create log directories
  file:
    path: /var/log/mindx-dl
    state: directory
    owner: root
    group: root
    mode: 0755

- name: create log directories for "{{DL_USR}}"
  file:
    path: "/var/log/mindx-dl/hccl-controller"
    state: directory
    owner: "{{DL_USR}}"
    group: "{{DL_GRP}}"
    mode: 0750

- name: create mindx-dl image pull secret
  shell: |
    kubectl create namespace mindx-dl >/dev/null 2>&1 || echo 0;
    kubectl create secret generic {{ MINDX_DL_SECRET_FOR_HARBOR }} --from-file=.dockerconfigjson=/root/.docker/config.json --type=kubernetes.io/dockerconfigjson -n mindx-dl >/dev/null 2>&1 || echo 0;
  environment:
    http_proxy: ""
    https_proxy: ""
    HTTP_PROXY: ""
    HTTPS_PROXY: ""
  ignore_errors: true
  when:
    - use_harbor
    - inventory_hostname in groups['master'][0]

# 清理default空间下的hccl信息
- name: clear default namespace hccl component
  shell:
    cmd:
      kubectl delete clusterrolebinding hccl-controller-rolebinding || true;
      kubectl delete sa hccl-controller || true;
      kubectl delete clusterrole pods-hccl-controller-role || true;
      kubectl delete deploy hccl-controller || true;
  environment:
    http_proxy: ""
    https_proxy: ""
    HTTP_PROXY: ""
    HTTPS_PROXY: ""
  when:
    - inventory_hostname in groups['master'][0]

# 部署hccl应用
- name: apply hccl component
  shell:
    cmd:
      kubectl apply -f {{mindxdl_yaml_dir}}/{{ item }}
  loop: "{{ yaml_file.stdout_lines }}"
  environment:
    http_proxy: ""
    https_proxy: ""
    HTTP_PROXY: ""
    HTTPS_PROXY: ""
  when:
    - inventory_hostname in groups['master'][0]

# 检查并更新hccl应用
- name: upgrade hccl component
  shell:
    cmd:
      hccl_info="$(kubectl get pods -n {{ MINDXDL_NAMESPACE }} -o wide 2>/dev/null | grep 'hccl-controller-' )";
      hccl_status=$(echo "$hccl_info" | grep "hccl-controller-.*Running" | wc -l);
      if [ $hccl_status = 0 ]; then exit 0; fi;
      for i in $(seq $hccl_status);do eval "$(echo "$hccl_info" | awk '{print "kubectl delete pod -n {{ MINDXDL_NAMESPACE }} "$1}')" || true; done
  environment:
    http_proxy: ""
    https_proxy: ""
    HTTP_PROXY: ""
    HTTPS_PROXY: ""
  when:
    - do_upgrade is defined
    - inventory_hostname in groups['master'][0]