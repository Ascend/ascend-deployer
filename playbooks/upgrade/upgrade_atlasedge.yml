- hosts: '{{ hosts_name }}'
  tasks:
    - name: create user if not exist
      import_tasks: ../create_user.yml

    - name: get A500pro_exist
      shell: dmidecode -t 1 |grep "Atlas 500 Pro" | awk -d" " '{print $3,$4,$5}'
      register: a500pro_exist

    - name: find atlasedge package
      find:
        paths: "{{ resources_dir }}/run_from_zip_dir/atlasedge_{{ ansible_architecture }}"
        recurse: no
        file_type: file
        use_regex: yes
        patterns: ".*atlasedge.*{{ansible_architecture}}.tar.gz"
      when: ansible_local.npu_info.scene == 'infer' and a500pro_exist.stdout != ""
      register: atlasedge

    - name: find AtlasEdge/run.sh in atlasedge install_path
      find:
        paths: "/usr/local/AtlasEdge/"
        recurse: no
        file_type: file
        use_regex: yes
        patterns: "run.sh$"
      register: atlasedge_run

    - name: upgrade atlasedge
      shell: "{{ atlasedge_run.files[0].path }} upgrade -i normal -f {{ atlasedge.files[0].path }} -s {{ atlasedge.files[0].path }}.cms -c {{ atlasedge.files[0].path }}.crl -e now -t AtlasEdge"
      register: atlasedge_result
      when: atlasedge.matched is defined and atlasedge.matched > 0
      failed_when: "atlasedge_result.rc !=0 and 'upgrade ok' not in atlasedge_result.stdout"

    - name: atlasedge scene message
      debug:
        msg:
          - "scene is not infer, atlasedge upgrade skipped"
      when: atlasedge.matched is undefined

    - name: message
      debug:
        msg:
          - "can not find atlasedge package, atlasedge upgrade skipped"
      when: atlasedge.matched is defined and atlasedge.matched == 0

    - name: atlasedge upgrade message
      debug: var=atlasedge_result
      when: atlasedge_result.changed is defined and atlasedge_result.changed
