- name: include vars
  include_vars: ../os_map.yml

- name: message
  debug:
    msg:
      - "can not find npu card, please check!"
  failed_when: true
  when: ansible_local.npu_info.scene == ""

- set_fact: run_dir={{ scene_dict[ansible_local.npu_info.scene] }}

- set_fact: driver_run=""

- name: find driver package linux only zip
  find:
    paths: "{{ run_dir }}"
    recurse: no
    file_type: file
    use_regex: yes
    patterns: "npu-driver.*linux.*{{ ansible_architecture }}.run"
  register: driver_pkg

- set_fact: driver_run={{driver_pkg.files[0].path}}
  when: driver_pkg.matched > 0

- name: find driver package specific_os only zip
  find:
    paths: "{{ run_dir }}"
    recurse: no
    file_type: file
    use_regex: yes
    patterns: "npu-driver.*{{ ansible_distribution.lower() }}{{ os_version }}.*{{ ansible_architecture }}.run"
  register: driver_pkg

- set_fact: driver_run={{driver_pkg.files[0].path}}
  when: driver_pkg.matched > 0

- name: find driver package linux
  find:
    paths: "{{ run_dir }}"
    recurse: no
    file_type: file
    use_regex: yes
    patterns: "{{ ansible_local.npu_info.product }}.*driver.*linux.*{{ ansible_architecture }}.run"
  register: driver_pkg

- set_fact: driver_run={{driver_pkg.files[0].path}}
  when: driver_pkg.matched > 0

- name: find driver package specific_os
  find:
    paths: "{{ run_dir }}"
    recurse: no
    file_type: file
    use_regex: yes
    patterns: "{{ ansible_local.npu_info.product }}.*driver.*{{ ansible_distribution.lower() }}{{ os_version }}.*{{ ansible_architecture }}.run"
  register: driver_pkg

- set_fact: driver_run={{driver_pkg.files[0].path}}
  when: driver_pkg.matched > 0

- name: get current driver version
  shell: cat /usr/local/Ascend/driver/version.info | grep Version | cut -d"=" -f2
  register: cur_driver_version
  when: driver_run | length > 0

- set_fact: current_driver_version={{ cur_driver_version.stdout }}
  when: driver_run | length > 0

- name: get target driver version
  set_fact:
    target_driver_version: "{{ driver_run | regex_replace('.*npu-driver_(.*)_[A-Za-z].*\\.run', '\\1') }}"
  when: driver_run | length > 0

- name: message
  debug:
    msg:
      - "current driver version={{ current_driver_version}}"
      - "target driver version={{ target_driver_version}}"
  when: driver_run | length > 0

- name: set /etc/modprobe.d/10-unsupported-modules.conf allow_unsupported_modules 1
  lineinfile:
    dest: /etc/modprobe.d/10-unsupported-modules.conf
    regexp: "^allow_unsupported_modules"
    line: "allow_unsupported_modules 1"
    state: present
  when:
    - driver_run | length > 0
    - current_driver_version != target_driver_version
    - "'SLES' in os_and_arch"

- name: upgrade driver
  shell: "bash {{ driver_run }} --upgrade --quiet"
  register: driver_result
  failed_when: driver_result.rc != 0
  when:
    - driver_run | length > 0
    - current_driver_version != target_driver_version

- name: message
  debug:
    msg:
      - "can not find driver package, driver upgrade skipped"
  when: driver_run | length == 0

- name: message
  debug:
    msg:
      - "current driver version is same as target driver version, driver upgrade skipped"
  when:
    - driver_run | length > 0
    - current_driver_version == target_driver_version

- name: message
  debug:
    msg:
      - "{{ driver_result | default('NOT DEFINED') }}"
  when: driver_result.changed

- name: service host_sys_init start
  shell: service host_sys_init start
  failed_when: false
  when: driver_result.changed
