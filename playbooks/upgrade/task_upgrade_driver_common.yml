- name: include vars
  include_vars: ../os_map.yml

- set_fact: run_dir={{ resources_dir }}

- set_fact: run_dir={{ scene_dict[ansible_local.npu_info.scene] }}
  when: ansible_local.npu_info.scene != ""

- set_fact: driver_run=""

- name: find driver package for specific linux
  find:
    paths: "{{ run_dir }}"
    recurse: no
    file_type: file
    use_regex: yes
    patterns: "{{ ansible_local.npu_info.product }}-.*{{ ansible_local.npu_info.model_number }}.*driver.*{{ ansible_distribution.lower() }}{{ os_version }}.*{{ ansible_architecture }}.run"
  register: driver_pkg

- set_fact: driver_run={{ driver_pkg.files[0].path }}
  when: driver_pkg.matched > 0

- name: find driver package for common linux
  find:
    paths: "{{ run_dir }}"
    recurse: no
    file_type: file
    use_regex: yes
    patterns: "{{ ansible_local.npu_info.product }}-.*{{ ansible_local.npu_info.model_number }}.*driver.*linux.*{{ ansible_architecture }}.run"
  register: driver_pkg
  when: driver_run | length == 0

- set_fact: driver_run={{ driver_pkg.files[0].path }}
  when:
    - driver_pkg is not skipped
    - driver_pkg.matched > 0

- name: find driver package
  find:
    paths: "{{ run_dir }}"
    recurse: no
    file_type: file
    use_regex: yes
    patterns: "npu-driver.*linux.*{{ ansible_architecture }}.run"
  register: driver_pkg
  when: driver_run | length == 0

- set_fact: driver_run={{ driver_pkg.files[0].path }}
  when:
    - driver_pkg is not skipped
    - driver_pkg.matched > 0

- name: get current driver version
  shell: cat /usr/local/Ascend/driver/version.info | grep Version | cut -d"=" -f2
  register: cur_driver_version

- set_fact: current_driver_version={{ cur_driver_version.stdout }}

- name: get target driver version
  set_fact:
    target_driver_version: "{{ driver_run | regex_replace('.*npu-driver_(.*)_[A-Za-z].*\\.run', '\\1') }}"
  when: driver_run | length > 0

- name: message
  debug:
    msg:
      - "current driver version={{ current_driver_version}}"
      - "target  driver version={{ target_driver_version}}"
  when: target_driver_version is defined

- name: upgrade driver
  shell: "bash {{ driver_run }} --upgrade --quiet"
  register: driver_result
  failed_when: "'upgrade success' not in driver_result.stdout"
  when:
    - driver_run | length > 0
    - target_driver_version is defined
    - current_driver_version != target_driver_version

- debug: var=driver_result

- name: service host_sys_init start
  shell: service host_sys_init start
  when:
    - driver_result is not skipped
