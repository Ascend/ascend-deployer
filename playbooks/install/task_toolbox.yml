- name: find toolbox script
  find:
    paths: "{{ cann_dirs }}"
    recurse: no
    file_type: file
    use_regex: yes
    patterns: ".*toolbox.*{{ ansible_architecture }}.sh"
  register: toolbox

- name: find toolbox run package
  find:
    paths: "{{ cann_dirs }}"
    recurse: no
    file_type: file
    use_regex: yes
    patterns: ".*toolbox.*{{ ansible_architecture }}.run"
  register: toolbox_run

- name: set log_path for root
  set_fact:
    log_path: /var/log/ascend_seclog/
  when: ansible_user_uid == 0

- name: set log_path for non-root
  set_fact:
    log_path: ~/var/log/ascend_seclog/
  when: ansible_user_uid != 0

- name: install toolbox for a200i soc
  shell: "export TOOLBOX_SOC=A200ISoC && bash {{ toolbox.files[0].path }} {{ log_path }}"
  register: toolbox_result
  when: toolbox.matched > 0 and ansible_local.npu_info.model == "Atlas 200I SoC A1"
  failed_when: "toolbox_result.rc != 0 and 'already installed' not in toolbox_result.stdout"

- name: message
  debug:
    msg:
      - "{{ toolbox_result | default('NOT DEFINED') }}"
  when: toolbox_result.changed and ansible_local.npu_info.model == "Atlas 200I SoC A1"

- name: install toolbox
  shell: "bash {{ toolbox.files[0].path }} {{ log_path }}"
  register: toolbox_result
  when: toolbox.matched > 0 and ansible_local.npu_info.model != "Atlas 200I SoC A1"
  failed_when: "toolbox_result.rc != 0 and 'already installed' not in toolbox_result.stdout"

- name: message
  debug:
    msg:
      - "{{ toolbox_result | default('NOT DEFINED') }}"
  when: toolbox_result.changed and ansible_local.npu_info.model != "Atlas 200I SoC A1"

- name: check ascend cann install info
  stat:
    path: "{{ cann_info_path }}/ascend_cann_install.info"
  register: install_info

- name: check ascend toolbox install info
  stat:
    path: "{{ cann_info_path }}/ascend_toolbox_install.info"
  register: toolbox_info

- set_fact: install_info={{toolbox_info}}
  when: toolbox_info.stat.exists

- name: set install_path enable
  set_fact:
    ins_path_cmd: "--install-path={{ install_path }}"
  when: not install_info.stat.exists

- name: set install_path disable
  set_fact:
    ins_path_cmd: ""
  when: install_info.stat.exists or ansible_user_uid != 0

- name: install toolbox
  shell: "bash {{ toolbox_run.files[0].path }} --nox11 {{ cann_install_params }} {{ins_path_cmd}}"
  register: toolbox_result
  when: toolbox.matched == 0 and toolbox_run.matched > 0 and (not toolbox_info.stat.exists)
  failed_when: "toolbox_result.rc != 0 and 'already installed' not in toolbox_result.stdout"

- name: message
  debug:
    msg:
      - "{{ toolbox_result | default('NOT DEFINED') }}"
  when: toolbox.matched == 0 and toolbox_result.changed

- name: upgrade toolbox
  shell: "bash {{ toolbox_run.files[0].path }} --nox11 --upgrade --quiet {{ins_path_cmd}}"
  register: toolbox_result
  when: toolbox.matched == 0 and toolbox_run.matched > 0 and toolbox_info.stat.exists
  failed_when: "toolbox_result.rc != 0 and 'already installed' not in toolbox_result.stdout"

- name: message
  debug:
    msg:
      - "can not find toolbox package, toolbox install skipped"
  when: toolbox_run.matched == 0

- name: message
  debug:
    msg:
      - "{{ toolbox_result | default('NOT DEFINED') }}"
  when: toolbox.matched == 0 and toolbox_result.changed
