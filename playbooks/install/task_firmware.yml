- name: include vars
  include_vars: ../os_map.yml

- name: get npu scene
  import_tasks: task_get_npu_scene.yml

- name: message
  debug:
    msg:
      - "can not find npu card, please check!"
  failed_when: true
  when: ansible_local.npu_info.scene == "" and npu_scene == ""

- set_fact: normalize910_dir={{ scene_dict['normalize910'] }}

- set_fact: train_dir={{ scene_dict['train'] }}

- set_fact: run_dir={{ scene_dict[npu_scene] }}
  when: old_cann == "after-5.1"

- set_fact: run_dir={{ old_scene_dict[npu_scene] }}
  when: old_cann == "before-5.1"

- name: stat normalize910_dir
  stat:
    path: "{{ normalize910_dir[0] }}"
  register: normalize910_dir_stat

- name: stat run_dir
  stat:
    path: "{{ run_dir[0] }}"
  register: run_dir_stat

- name: stat train_dir
  stat:
    path: "{{ train_dir[0] }}"
  register: train_dir_stat

- name: find driver upgrade tool
  find:
    path: /usr/local/Ascend/driver
    recurse: yes
    file_type: file
    use_regex: yes
    patterns: "upgrade-tool"
  register: up_tool

- name: message
  debug:
    msg:
      - "driver not installed, please install driver first"
  failed_when: true
  when: up_tool.matched == 0

- name: find firmware upgrade tool
  find:
    path: /usr/local/Ascend/firmware
    recurse: yes
    file_type: file
    use_regex: yes
    patterns: "upgrade"
  register: up_firm

- name: find firmware package only zip first
  find:
    paths: "{{ train_dir }}"
    recurse: no
    file_type: file
    use_regex: yes
    patterns: ".*npu-firmware.*.run"
  register: firmware_pro_pkg
  when: (not run_dir_stat.stat.exists and train_dir_stat.stat.exists) and cus_npu_info is defined and cus_npu_info == '300t-pro' and ansible_local.npu_info.scene == 'train'

- set_fact: firmware_pro_run={{firmware_pro_pkg.files[0].path}}
  when:
    - cus_npu_info is defined and cus_npu_info == '300t-pro'
    - (not run_dir_stat.stat.exists and train_dir_stat.stat.exists) and firmware_pro_pkg.matched > 0

- name: find firmware package only zip second
  find:
    paths: "{{ run_dir }}"
    recurse: no
    file_type: file
    use_regex: yes
    patterns: ".*npu-firmware.*.run"
  register: firmware_pkg
  when: run_dir_stat.stat.exists

- set_fact: firmware_run={{firmware_pkg.files[0].path}}
  when: run_dir_stat.stat.exists and firmware_pkg.matched > 0

- name: find driver package linux only zip third
  find:
    paths: "{{ normalize910_dir }}"
    recurse: no
    file_type: file
    use_regex: yes
    patterns: ".*npu-firmware.*.run"
  register: firmware_pkg
  when: normalize910_dir_stat.stat.exists and ansible_local.npu_info.scene == 'train'

- set_fact: firmware_run={{firmware_pkg.files[0].path}}
  when: normalize910_dir_stat.stat.exists and firmware_pkg.matched > 0 and ansible_local.npu_info.scene == 'train'

- name: find firmware package
  find:
    paths: "{{ run_dir }}"
    recurse: no
    file_type: file
    use_regex: yes
    patterns: "{{ ansible_local.npu_info.product }}.*firmware.*.run"
  register: firmware_pkg
  when: run_dir_stat.stat.exists

- set_fact: firmware_run={{firmware_pkg.files[0].path}}
  when: run_dir_stat.stat.exists and firmware_pkg.matched > 0

- name: upgrade firmware
  shell: "bash {{ firmware_run|default(firmware_pro_run) }} --nox11 --upgrade --quiet"
  register: firmware_up_result
  when: (firmware_run is defined and firmware_run|length > 0 or firmware_pro_run is defined and firmware_pro_run|length > 0) and (up_firm.matched > 0)
  failed_when: firmware_up_result.rc != 0 and firmware_up_result.rc != 2

- name: install firmware
  shell: "bash {{ firmware_run|default(firmware_pro_run) }} --nox11 --full --quiet"
  register: firmware_result
  when: (firmware_run is defined and firmware_run|length > 0 or firmware_pro_run is defined and firmware_pro_run|length > 0) and (up_firm.matched == 0)
  failed_when: firmware_result.rc != 0 and firmware_result.rc != 2

- name: message
  debug:
    msg:
      - "can not find firmware package, firmware install skipped"
  when: firmware_run is undefined and firmware_pro_run is undefined

- name: message
  debug:
    msg:
      - "{{ firmware_result | default('NOT DEFINED') }}"
  when: firmware_result.changed

- name: message
  debug:
    msg:
      - "{{ firmware_up_result | default('NOT DEFINED') }}"
  when: firmware_up_result.changed
