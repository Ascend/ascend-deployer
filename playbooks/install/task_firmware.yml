- name: get npu info for Atlas 800 and Atlas 900
  shell: dmidecode -t 1 |egrep "Atlas 800 \(Model 90|Atlas 900" | awk -d" " '{print $4"-"$6}' | head -c -2
  register: npu_info
  become: yes

- name: set npu product name for A800 and A900
  set_fact: npu_product="A{{ npu_info.stdout }}"
  when: npu_info.stdout != ""

- name: set npu product name for others
  set_fact: npu_product="{{ ansible_local.npu_info.product }}-.*{{ ansible_local.npu_info.model_number }}"
  when: npu_info.stdout == ""

- name: find firmware package from run_from_zip_dir first
  find:
    path: "{{ resources_dir }}/run_from_zip_dir"
    recurse: no
    file_type: file
    use_regex: yes
    patterns: "{{ npu_product }}.*firmware.*.run"
  register: firmware_pkg_from_zip

- name: find firmware package
  find:
    path: "{{ resources_dir }}"
    recurse: no
    file_type: file
    use_regex: yes
    patterns: "{{ npu_product }}.*firmware.*.run"
  register: firmware_pkg
  when: firmware_pkg_from_zip.matched == 0

- name: find upgrade tool
  find:
    path: /usr/local/Ascend/driver
    recurse: yes
    file_type: file
    use_regex: yes
    patterns: "upgrade-tool"
  register: up_tool

- name: message
  debug:
    msg:
    - "firmware install failed: driver not installed"
  failed_when: true
  when: up_tool.matched == 0 and (firmware_pkg_from_zip.matched > 0 or firmware_pkg.matched > 0)

- name: install firmware from run_from_zip_dir first
  shell: "bash {{ firmware_pkg_from_zip.files[0].path }} --full --quiet"
  become: yes
  register: firmware_result_from_zip
  when: firmware_pkg_from_zip.matched > 0
  failed_when: "firmware_result_from_zip.rc != 0 and ('install success' not in firmware_result_from_zip.stdout and 'already installed' not in firmware_result_from_zip.stdout)"

- name: install firmware
  shell: "bash {{ firmware_pkg.files[0].path }} --full --quiet"
  become: yes
  register: firmware_result
  when: firmware_pkg_from_zip.matched == 0 and firmware_pkg.matched > 0
  failed_when: "firmware_result.rc != 0 and ('install success' not in firmware_result.stdout and 'already installed' not in firmware_result.stdout)"

- name: message
  debug:
    msg:
      - "can not find firmware package, firmware install skipped"
  when: firmware_pkg_from_zip.matched == 0 and firmware_pkg.matched == 0

- name: message
  debug:
    msg:
      - "{{ firmware_result_from_zip | default('NOT DEFINED') }}"
      - "{{ firmware_result | default('NOT DEFINED') }}"
  when: firmware_result_from_zip.changed or firmware_result.changed