- name: include vars
  include_vars: ../os_map.yml

- name: message
  debug:
    msg:
      - "can not find npu card, please check!"
  failed_when: true
  when: ansible_local.npu_info.scene == ""

- set_fact: run_dir={{ scene_dict[ansible_local.npu_info.scene] }}

- name: find driver package linux only zip
  find:
    paths: "{{ run_dir }}"
    recurse: no
    file_type: file
    use_regex: yes
    patterns: "npu-driver.*linux.*{{ ansible_architecture }}.run"
  register: driver_pkg

- set_fact: driver_run={{driver_pkg.files[0].path}}
  when: driver_pkg.matched > 0

- name: find driver package specific_os only zip
  find:
    paths: "{{ run_dir }}"
    recurse: no
    file_type: file
    use_regex: yes
    patterns: "npu-driver.*{{ ansible_distribution.lower() }}{{ os_version }}.*{{ ansible_architecture }}.run"
  register: driver_pkg

- set_fact: driver_run={{driver_pkg.files[0].path}}
  when: driver_pkg.matched > 0

- name: find driver package linux
  find:
    paths: "{{ run_dir }}"
    recurse: no
    file_type: file
    use_regex: yes
    patterns: "{{ ansible_local.npu_info.product }}.*driver.*linux.*{{ ansible_architecture }}.run"
  register: driver_pkg

- set_fact: driver_run={{driver_pkg.files[0].path}}
  when: driver_pkg.matched > 0

- name: find driver package specific_os
  find:
    paths: "{{ run_dir }}"
    recurse: no
    file_type: file
    use_regex: yes
    patterns: "{{ ansible_local.npu_info.product }}.*driver.*{{ ansible_distribution.lower() }}{{ os_version }}.*{{ ansible_architecture }}.run"
  register: driver_pkg

- set_fact: driver_run={{driver_pkg.files[0].path}}
  when: driver_pkg.matched > 0

- name: set /etc/modprobe.d/10-unsupported-modules.conf allow_unsupported_modules 1
  lineinfile:
    dest: /etc/modprobe.d/10-unsupported-modules.conf
    regexp: "^allow_unsupported_modules"
    line: "allow_unsupported_modules 1"
    state: present
  when:
    - (driver_run is defined) and (driver_run|length > 0)
    - "'SLES' in os_and_arch"

- name: install driver
  shell: "bash {{driver_run}} --nox11 --full --quiet --install-username={{user}} --install-usergroup={{group}}"
  environment:
    PATH: /opt/rh/devtoolset-8/root/usr/bin/:/usr/sbin/:/sbin:{{ ansible_env.PATH }}
  register: driver_result
  failed_when: driver_result.rc == 1
  when: (driver_run is defined) and (driver_run|length > 0)

- name: message
  debug:
    msg:
      - "can not find driver package, driver install skipped"
  when: (driver_run is not defined) or (driver_run|length == 0)

- name: message
  debug:
    msg:
      - "{{ driver_result | default('NOT DEFINED') }}"
  when: driver_result.changed

- name: service host_sys_init start
  shell: service host_sys_init start
  failed_when: false
  when: driver_result.changed
