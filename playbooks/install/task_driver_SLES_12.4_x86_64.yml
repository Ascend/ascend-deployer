- name: find driver package for SLES from run_from_zip_dir first
  find:
    path: "{{ resources_dir }}/run_from_zip_dir"
    recurse: no
    file_type: file
    use_regex: yes
    patterns: "{{ npu_product }}.*driver.*linux.*{{ ansible_architecture }}.run"
  register: driver_pkg_linux_from_zip

- name: find driver package for SLES
  find:
    path: "{{ resources_dir }}"
    recurse: no
    file_type: file
    use_regex: yes
    patterns: "{{ npu_product }}.*driver.*linux.*{{ ansible_architecture }}.run"
  register: driver_pkg_linux
  when: driver_pkg_linux_from_zip.matched == 0

- name: set /etc/modprobe.d/10-unsupported-modules.conf allow_unsupported_modules 1
  lineinfile:
    dest: /etc/modprobe.d/10-unsupported-modules.conf
    regexp: "^allow_unsupported_modules"
    line: "allow_unsupported_modules 1"
    state: present
  become: yes
  when: driver_pkg_linux_from_zip.matched > 0 or driver_pkg_linux.matched > 0

- name: install driver for SLES from run_from_zip_dir first
  shell: "bash {{driver_pkg_linux_from_zip.files[0].path}} --full --quiet --install-username={{user}} --install-usergroup={{group}}"
  register: driver_result_from_zip
  failed_when: "'install success' not in driver_result_from_zip.stdout"
  when: driver_pkg_linux_from_zip.matched > 0
  become: yes

- name: install driver for SLES
  shell: "bash {{driver_pkg_linux.files[0].path}} --full --quiet --install-username={{user}} --install-usergroup={{group}}"
  register: driver_result
  failed_when: "'install success' not in driver_result.stdout"
  when: driver_pkg_linux_from_zip.matched == 0 and driver_pkg_linux.matched > 0
  become: yes

- name: message
  debug:
    msg:
      - "can not find driver package, driver install skipped"
  when: driver_pkg_linux_from_zip.matched == 0 and driver_pkg_linux.matched == 0

- name: message
  debug:
    msg:
      - "{{ driver_result_from_zip | default('NOT DEFINED') }}"
      - "{{ driver_result | default('NOT DEFINED') }}"
  when: driver_result_from_zip.changed or driver_result.changed

- name: service host_sys_init start
  shell: service host_sys_init start
  become: yes
  failed_when: false
  when: driver_result_from_zip.changed or driver_result.changed
