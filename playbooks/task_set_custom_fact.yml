- name: include vars
  include_vars: os_map.yml

- name: get OS ID
  shell: grep -oP "^ID=\"?\K\w+" /etc/os-release
  changed_when: false
  register: os_id

- name: get OS VERSION
  shell: grep -oP "^VERSION_ID=\"?\K\w+\.?\w*" /etc/os-release
  changed_when: false
  register: os_ver

- name: get OS code name
  shell: grep -oP "^VERSION=(.*?)\(\K[\w\.\ ]+" /etc/os-release
  changed_when: false
  register: os_codename

- name: set os_name
  set_fact:
    os_name: "{{ os_dict[os_id.stdout] }}"
    cacheable: yes
  when: os_id.stdout in os_dict

- name: message
  debug:
    msg: "os {{ os_id.stdout}} is not supportted"
  failed_when: true
  when: os_id.stdout not in os_dict

- name: set os_version first
  set_fact:
    os_version: "{{ os_ver.stdout }}"
    cacheable: yes

- name: set os_version second
  set_fact:
    os_version: "{{ os_version_dict[os_id.stdout][os_ver.stdout] }}"
    cacheable: yes
  when: os_id.stdout in os_version_dict

- name: set os code name
  set_fact:
    code_name: os_codename.stdout
    cacheable: yes
  when: os_id.stdout in code_name_dict

- name: set os_and_arch
  set_fact:
    os_and_arch: "{{os_name}}_{{os_version}}{{code_name}}_{{ansible_architecture}}"
    cacheable: yes

- name: set resources_dir local
  set_fact:
    resources_dir: "{{ inventory_dir }}/resources"
    cacheable: yes
  when: ansible_connection == "local"

- name: set resources_dir remote
  set_fact:
    resources_dir: "~/resources"
    cacheable: yes
  when: ansible_connection != "local"

- name: set build_dir
  set_fact:
    build_dir: "{{ ansible_user_dir }}/build"
    cacheable: yes

- name: check if need prepare
  local_action: stat path=prepare_{{os_and_arch}}.yml
  register: optional_file

- name: process prepare
  include_tasks: "prepare_{{os_and_arch}}.yml"
  when: optional_file.stat.exists
